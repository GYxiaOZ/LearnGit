本地:
	git config --global user.name "xxx"	   
		全局用户名改为xxx
	git config --global user.email "x@x"	
		用户邮箱改为xxx
	mkdir xxx	新建文件夹
	cd xxx	切换到文件夹
	git init	
		创建版本库在当前目录
	echo > xxx.xxx	新建一个xxx.xxx在当前目录
	echo -e "要添加的东西" >> xxx.xxx	把东西添加到xxx.xxx
	**git add xxx.xxx	
		把xxx文件放入暂存区(*.xxx表示所有 .xxx文件)
	**git commit -m "做的事情"	
		把文件添加到仓库,加备注
	git status	
		查看文件提交状态
	git diff xxx.xxx	查看文件不同
	git log	查看版本日志	
		git log --oneline
	git reset -–hard head^	  回退到上一个版本
	git reset --hard 版本号	   回到号码的版本
	git reflog    获得版本号
	git checkout -- xxx.xxx		文件返回到上个版本
		还没有放到暂存区，使用 撤销修改就回到和版本库一样的状态;
		已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。
	git reset head xxx.xxx	重置最新版本(清除暂存区的东西)
		使用了add添加到暂存区,要先reset在还原
		没有使用add,可以直接checkout还原
	rm x.x	   删除文件
		想彻底从版本库中删掉了此文件的话,可以再执行commit命令提交
		想在版本库中恢复此文件,使用 git checkout  -- x.x
远程仓库:
ssh-keygen -t rsa -C "420628272@qq.com"		创建一个ssh密钥
	1.id_rsa是私钥,id_rsa.pub是公钥
		cd ~/.ssh	切换到ssh文件夹
	2.登录github,打开settings中的SSH Keys页面,然后点击Add SSH Key,
	  填上任意title,在Key文本框里黏贴id_rsa.pub文件的内容
	3.在github创建仓库
	  git remote add origin git@github.com:zzx159357zzx/demo.git	
	  转到git工作区目录后,添加远程连接
	4.git push -u origin 分支名
		将本地的分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了
	  git push origin 分支名	
		运行过上面命令后,直接将本地内容推送到github
	克隆:
		git clone https://......
分支:
	git branch xxx
		创建分支
	git checkout xxx
		切换到xxx分支
	git checkout -b xxx	
		创建并切换分支
	git branch
		查看分支
	*分支上修改了,要add和commit
	git merge xxx
		合并分支到当前分支
	git branch -d xxx
		删除分支
	1.分支冲突:
		在主分支上自己修改后add,commit
		想查看分支合并的情况的话，需要使用命令 git log
	2.分支管理策略:
      通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息,使用带参数 –no-ff来禁用"Fast forward"模式
		例:创建一个dev分支。
		   修改readme.txt内容。
		   添加到暂存区。
		   切换回主分支(master)。
	       合并dev分支，使用命令 git merge –no-ff  -m “注释” dev
		   查看历史记录
	3.bug分支:
		git stash
			把当前工作现场"隐藏起来"
		git stash list
			查看工作现场
		恢复隐藏区域
			git stash apply	恢复后,stash内容并不删除,需要使用命令git stash drop来删除
			git stash pop	恢复的同时把stash内容也删除了
多人协作: (远程库的默认名称是origin)
	要查看远程库的信息 使用 git remote
	要查看远程库的详细信息 使用 git remote –v
	git checkout  –b 分支名 origin/分支名
		把远程的origin的xxx分支创建到本地来
	多人协作工作模式一般是这样的：
		1.可以试图用git push origin branch-name推送自己的修改
		2.如果推送失败,则因为远程分支比你的本地更新早,需要先用git pull试图合并
		3.如果合并有冲突,则需要解决冲突,并在本地提交,再用git push origin branch-name推送


Git基本常用命令如下：
   mkdir：         XX (创建一个空目录 XX指目录名)

   pwd：          显示当前目录的路径。

   git init          把当前的目录变成可以管理的git仓库，生成隐藏.git文件。

   git add XX       把xx文件添加到暂存区去。

   git commit –m “XX”  提交文件 –m 后面的是注释。

   git status        查看仓库状态

   git diff  XX      查看XX文件修改了那些内容

   git log          查看历史记录

   git reset  –hard HEAD^ 或者 git reset  –hard HEAD~ 回退到上一个版本

                        (如果想回退到100个版本，使用git reset –hard HEAD~100 )

   cat XX         查看XX文件内容

   git reflog       查看历史记录的版本号id

   git checkout — XX  把XX文件在工作区的修改全部撤销。

   git rm XX          删除XX文件

   git remote add origin https://github.com/tugenhua0707/testgit 关联一个远程库

   git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库

   git clone https://github.com/tugenhua0707/testgit  从远程库中克隆

   git checkout –b dev  创建dev分支 并切换到dev分支上

   git branch  查看当前所有的分支

   git checkout master 切换回master分支

   git merge dev    在当前的分支上合并dev分支

   git branch –d dev 删除dev分支

   git branch name  创建分支

   git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作

   git stash list 查看所有被隐藏的文件列表

   git stash apply 恢复被隐藏的文件，但是内容不删除

   git stash drop 删除文件

   git stash pop 恢复文件的同时 也删除文件

   git remote 查看远程库的信息

   git remote –v 查看远程库的详细信息

   git push origin master  Git会把master分支推送到远程库对应的远程分支上